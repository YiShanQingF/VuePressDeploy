(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{417:function(a,t,r){"use strict";r.r(t);var s=r(8),e=Object(s.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"java多线程编程核心技术-第3版"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java多线程编程核心技术-第3版"}},[a._v("#")]),a._v(" Java多线程编程核心技术（第3版）")]),a._v(" "),t("h2",{attrs:{id:"第1章-java多线程技能"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第1章-java多线程技能"}},[a._v("#")]),a._v(" 第1章 Java多线程技能")]),a._v(" "),t("h3",{attrs:{id:"_1-进程-线程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-进程-线程"}},[a._v("#")]),a._v(" 1.进程&线程")]),a._v(" "),t("h4",{attrs:{id:"进程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#进程"}},[a._v("#")]),a._v(" 进程")]),a._v(" "),t("p",[a._v("进程是正在运行的程序的实例")]),a._v(" "),t("p",[t("strong",[a._v("主要概念：")])]),a._v(" "),t("ul",[t("li",[a._v("进程是一个实体。每一个进程都有它自己的地址空间，一般情况下，包括文本区域（text region）、数据区域（data region）和堆栈（stack region）。文本区域存储处理器执行的代码；数据区域存储变量和进程执行期间使用的动态分配的内存；堆栈区域存储着活动过程调用的指令和本地变量。")]),a._v(" "),t("li",[a._v("进程是一个“执行中的程序”。程序是一个没有生命的实体，只有处理器赋予程序生命时（操作系统执行之），它才能成为一个活动的实体，我们称其为进程。")])]),a._v(" "),t("h4",{attrs:{id:"线程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#线程"}},[a._v("#")]),a._v(" 线程")]),a._v(" "),t("p",[a._v("线程是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。")]),a._v(" "),t("h3",{attrs:{id:"_2-创建多线程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-创建多线程"}},[a._v("#")]),a._v(" 2.创建多线程")]),a._v(" "),t("h4",{attrs:{id:"继承thread"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#继承thread"}},[a._v("#")]),a._v(" 继承Thread")]),a._v(" "),t("h4",{attrs:{id:"实现runnable接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现runnable接口"}},[a._v("#")]),a._v(" 实现Runnable接口")]),a._v(" "),t("h4",{attrs:{id:"线程分析工具"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#线程分析工具"}},[a._v("#")]),a._v(" 线程分析工具")]),a._v(" "),t("ul",[t("li",[a._v("jps+jstack.exe")]),a._v(" "),t("li",[a._v("jmc.exe")]),a._v(" "),t("li",[a._v("jvisualvm.exe")])]),a._v(" "),t("h4",{attrs:{id:"执行start-的顺序不代表执行-run-的顺序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#执行start-的顺序不代表执行-run-的顺序"}},[a._v("#")]),a._v(" 执行start()的顺序不代表执行 run() 的顺序")]),a._v(" "),t("h4",{attrs:{id:"servlet技术也会引起-非线程安全-问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#servlet技术也会引起-非线程安全-问题"}},[a._v("#")]),a._v(" Servlet技术也会引起“非线程安全”问题")]),a._v(" "),t("p",[a._v("非线程安全主要是指，多个线程对同一个对象中的同一个实例变量进行操作时会出现值被改、值不同步的情况，进而影响程序执行流程。")]),a._v(" "),t("h4",{attrs:{id:"i-与system-out-println-出现的-非线程安全-问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#i-与system-out-println-出现的-非线程安全-问题"}},[a._v("#")]),a._v(" "),t("code",[a._v("i--")]),a._v(" 与System.out.println()出现的“非线程安全”问题")]),a._v(" "),t("h3",{attrs:{id:"_3-方法-cuurrentthread"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-方法-cuurrentthread"}},[a._v("#")]),a._v(" 3.方法 cuurrentThread()")]),a._v(" "),t("h3",{attrs:{id:"_4-方法-isalive"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-方法-isalive"}},[a._v("#")]),a._v(" 4.方法 isAlive()")]),a._v(" "),t("h3",{attrs:{id:"_5-方法-sleep-long-millis"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-方法-sleep-long-millis"}},[a._v("#")]),a._v(" 5.方法 sleep(long millis)")]),a._v(" "),t("h3",{attrs:{id:"_6-方法-sleep-long-millis-int-nanos"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-方法-sleep-long-millis-int-nanos"}},[a._v("#")]),a._v(" 6.方法 sleep(long millis, int nanos)")]),a._v(" "),t("h3",{attrs:{id:"_7-方法-stackthreadelement-getstacktread"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-方法-stackthreadelement-getstacktread"}},[a._v("#")]),a._v(" 7.方法 StackThreadElement[] getStackTread()")]),a._v(" "),t("h3",{attrs:{id:"_8-方法-static-void-dumpstack"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-方法-static-void-dumpstack"}},[a._v("#")]),a._v(" 8.方法 static void dumpStack()")]),a._v(" "),t("h3",{attrs:{id:"_9-方法-map-thread-stackthreadelement-getallstacktrances"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-方法-map-thread-stackthreadelement-getallstacktrances"}},[a._v("#")]),a._v(" 9.方法 Map<Thread StackThreadElement> getAllStackTrances()")]),a._v(" "),t("h3",{attrs:{id:"_10-方法-getid"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-方法-getid"}},[a._v("#")]),a._v(" 10.方法 getId()")]),a._v(" "),t("h3",{attrs:{id:"_11-停止线程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11-停止线程"}},[a._v("#")]),a._v(" 11.停止线程")]),a._v(" "),t("h3",{attrs:{id:"_12-暂停线程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_12-暂停线程"}},[a._v("#")]),a._v(" 12.暂停线程")]),a._v(" "),t("h3",{attrs:{id:"_13-方法-yield"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13-方法-yield"}},[a._v("#")]),a._v(" 13.方法 yield()")]),a._v(" "),t("h3",{attrs:{id:"_14-线程的优先级"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_14-线程的优先级"}},[a._v("#")]),a._v(" 14.线程的优先级")]),a._v(" "),t("h3",{attrs:{id:"_15-守护线程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_15-守护线程"}},[a._v("#")]),a._v(" 15.守护线程")]),a._v(" "),t("h3",{attrs:{id:"_16-并发与并行"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_16-并发与并行"}},[a._v("#")]),a._v(" 16.并发与并行")]),a._v(" "),t("h3",{attrs:{id:"_17-同步与异步"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_17-同步与异步"}},[a._v("#")]),a._v(" 17.同步与异步")]),a._v(" "),t("h3",{attrs:{id:"_18-多核cpu不一定比单核cpu运行快"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_18-多核cpu不一定比单核cpu运行快"}},[a._v("#")]),a._v(" 18.多核CPU不一定比单核CPU运行快")]),a._v(" "),t("h3",{attrs:{id:"_19-小结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_19-小结"}},[a._v("#")]),a._v(" 19.小结")]),a._v(" "),t("h2",{attrs:{id:"第2章-对象及变量的并发访问"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第2章-对象及变量的并发访问"}},[a._v("#")]),a._v(" 第2章 对象及变量的并发访问")]),a._v(" "),t("h2",{attrs:{id:"第3章-线程间通信"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第3章-线程间通信"}},[a._v("#")]),a._v(" 第3章 线程间通信")]),a._v(" "),t("h2",{attrs:{id:"第4章-锁的使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第4章-锁的使用"}},[a._v("#")]),a._v(" 第4章 锁的使用")]),a._v(" "),t("h2",{attrs:{id:"第5章-定时器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第5章-定时器"}},[a._v("#")]),a._v(" 第5章 定时器")]),a._v(" "),t("h2",{attrs:{id:"第6章-单例模式与多线程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第6章-单例模式与多线程"}},[a._v("#")]),a._v(" 第6章 单例模式与多线程")]),a._v(" "),t("h2",{attrs:{id:"第7章-拾遗增补"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第7章-拾遗增补"}},[a._v("#")]),a._v(" 第7章 拾遗增补")]),a._v(" "),t("h2",{attrs:{id:"第8章-并发集合框架"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第8章-并发集合框架"}},[a._v("#")]),a._v(" 第8章 并发集合框架")]),a._v(" "),t("h2",{attrs:{id:"第9章-线程池类-threadpoolexecutor"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第9章-线程池类-threadpoolexecutor"}},[a._v("#")]),a._v(" 第9章 线程池类 ThreadPoolExecutor")])])}),[],!1,null,null,null);t.default=e.exports}}]);