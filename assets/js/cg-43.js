(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{423:function(i,v,t){"use strict";t.r(v);var _=t(8),e=Object(_.a)({},(function(){var i=this,v=i._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":i.$parent.slotKey}},[v("h1",{attrs:{id:"设计模式七大原则"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#设计模式七大原则"}},[i._v("#")]),i._v(" 设计模式七大原则")]),i._v(" "),v("h2",{attrs:{id:"设计模式内容介绍"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#设计模式内容介绍"}},[i._v("#")]),i._v(" 设计模式内容介绍")]),i._v(" "),v("h3",{attrs:{id:"设计模式的重要性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#设计模式的重要性"}},[i._v("#")]),i._v(" 设计模式的重要性")]),i._v(" "),v("ul",[v("li",[i._v("软件工程中，设计模式（design pattern）是对软件设计中普遍存在（反复出现）的各种问题，所提出的解决方案。这个术语是由埃里希·伽玛（Erich Gamma）等人在1990年代从建筑设计领域引入到计算机科学的")]),i._v(" "),v("li",[i._v("面向对象(oo)=>功能模块[设计模式+算法(数据结构)]=>框架[使用到多种设计模式]=>架构 [服务器集群]")])]),i._v(" "),v("h3",{attrs:{id:"设计模式的目的"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#设计模式的目的"}},[i._v("#")]),i._v(" 设计模式的目的")]),i._v(" "),v("p",[i._v("编写软件过程中，面临着来自耦合性，内聚性以及可维护性，可扩展性，重用性，灵活性 等多方面的挑战，设计模式是为了让程序(软件)，具有更好的")]),i._v(" "),v("ul",[v("li",[i._v("代码重用性 (即：相同功能的代码，不用多次编写)")]),i._v(" "),v("li",[i._v("可读性 (即：编程规范性, 便于其他程序员的阅读和理解)")]),i._v(" "),v("li",[i._v("可扩展性 (即：当需要增加新的功能时，非常的方便，称为可维护)")]),i._v(" "),v("li",[i._v("可靠性 (即：当我们增加新的功能后，对原来的功能没有影响)")]),i._v(" "),v("li",[i._v("使程序呈现高内聚，低耦合的特性")])]),i._v(" "),v("blockquote",[v("p",[i._v("设计模式包含了面向对象的精髓，“懂了设计模式，你就懂了面向对象分析和设计（OOA/D）的精要”")])]),i._v(" "),v("h2",{attrs:{id:"设计模式七大原则-2"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#设计模式七大原则-2"}},[i._v("#")]),i._v(" 设计模式七大原则")]),i._v(" "),v("div",{staticClass:"language- line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[i._v("接口隔离原则\n单一职责原则\n依赖倒转(倒置)原则\n里氏替换原则\n开闭原则\n迪米特法则\n合成复用原则\n")])]),i._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[i._v("1")]),v("br"),v("span",{staticClass:"line-number"},[i._v("2")]),v("br"),v("span",{staticClass:"line-number"},[i._v("3")]),v("br"),v("span",{staticClass:"line-number"},[i._v("4")]),v("br"),v("span",{staticClass:"line-number"},[i._v("5")]),v("br"),v("span",{staticClass:"line-number"},[i._v("6")]),v("br"),v("span",{staticClass:"line-number"},[i._v("7")]),v("br")])]),v("h3",{attrs:{id:"单一职责原则-single-responsiblility-principle"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#单一职责原则-single-responsiblility-principle"}},[i._v("#")]),i._v(" 单一职责原则 Single Responsiblility Principle")]),i._v(" "),v("blockquote",[v("p",[i._v("一个接口或类只有一个职责，单一职责用职责来衡量接口或类设计是否优良，但职责是不可度量的，因项目而异，因环境而异。")])]),i._v(" "),v("ul",[v("li",[i._v("降低类的复杂度，一个类只负责一项职责。")]),i._v(" "),v("li",[i._v("提高类的可读性，可维护性")]),i._v(" "),v("li",[i._v("降低变更引起的风险")]),i._v(" "),v("li",[i._v("通常情况下，我们应当遵守单一职责原则，只有逻辑足够简单，才可以在代码级违反单一职责原则；只有类中方法数量足够少，可以在方法级别保持单一职责原则")])]),i._v(" "),v("h3",{attrs:{id:"接口隔离原则-interface-segregation-principle"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#接口隔离原则-interface-segregation-principle"}},[i._v("#")]),i._v(" 接口隔离原则 Interface Segregation Principle")]),i._v(" "),v("blockquote",[v("p",[i._v("使用多个隔离接口，比使用单个接口好。一个接口只服务于一个子模块和业务逻辑。")])]),i._v(" "),v("ul",[v("li",[i._v("客户端不应该依赖它不需要的接口，即"),v("strong",[i._v("一个类对另一个类的依赖应该建立在最小的接口上")]),i._v(" "),v("img",{staticClass:"lazy",attrs:{alt:"","data-src":"/images/designPattern/%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB-%E5%AF%BC%E5%87%BA.png",loading:"lazy"}})])]),i._v(" "),v("h3",{attrs:{id:"依赖倒转-倒置-原则-dependence-inversion-principle"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#依赖倒转-倒置-原则-dependence-inversion-principle"}},[i._v("#")]),i._v(" 依赖倒转(倒置)原则 Dependence Inversion Principle")]),i._v(" "),v("blockquote",[v("p",[i._v("面向接口编程，每个类尽量都有接口或者抽象类，抽象不应该依赖于细节，细节应当依赖于抽象，要针对接口编程。")])]),i._v(" "),v("ul",[v("li",[i._v("高层模块不应该依赖低层模块，二者都应该依赖其抽象")]),i._v(" "),v("li",[i._v("抽象不应该依赖细节，细节应该依赖抽象")]),i._v(" "),v("li",[i._v("依赖倒转(倒置)的中心思想是面向接口编程")]),i._v(" "),v("li",[i._v("依赖倒转原则是基于这样的设计理念：相对于细节的多变性，抽象的东西要稳定的多。以抽象为基础搭建的架构比以细节为基础的架构要稳定的多。在java中，抽象指的是接口或抽象类，细节就是具体的实现类")]),i._v(" "),v("li",[i._v("使用接口或抽象类的目的是制定好规范，而不涉及任何具体的操作，把展现细节的任务交给他们的实现类去完成")])]),i._v(" "),v("p",[v("strong",[i._v("依赖关系传递的三种方式和应用案例")])]),i._v(" "),v("ul",[v("li",[i._v("接口传递（方法参数）")]),i._v(" "),v("li",[i._v("构造方法传递（）")]),i._v(" "),v("li",[i._v("setter方式传递")])]),i._v(" "),v("p",[v("strong",[i._v("注意事项和细节")])]),i._v(" "),v("ul",[v("li",[i._v("低层模块尽量都要有抽象类或接口，或者两者都有，程序稳定性更好.")]),i._v(" "),v("li",[i._v("变量的声明类型尽量是抽象类或接口, 这样我们的变量引用和实际对象间，就存在一个缓冲层，利于程序扩展和优化")]),i._v(" "),v("li",[i._v("继承时遵循里氏替换原则")])]),i._v(" "),v("h3",{attrs:{id:"里氏替换原则-liskov-substitution-principle"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#里氏替换原则-liskov-substitution-principle"}},[i._v("#")]),i._v(" 里氏替换原则 Liskov Substitution Principle")]),i._v(" "),v("blockquote",[v("p",[i._v("只要父类可以出现的地方，之类就可以出现，而且替换为之类也不会产生任何错误或异常，使用者可能根本不需要知道是父类还是子类，反过来不适用。")])]),i._v(" "),v("p",[v("strong",[i._v("OO中的继承性的思考和说明")])]),i._v(" "),v("ul",[v("li",[i._v("继承包含这样一层含义：父类中凡是已经实现好的方法，实际上是在设定规范和契约，虽然它不强制要求所有的子类必须遵循这些契约，但是如果子类对这些已经实现的方法任意修改，就会对整个继承体系造成破坏。")]),i._v(" "),v("li",[i._v("继承在给程序设计带来便利的同时，也带来了弊端。比如使用继承会给程序带来侵入性，程序的可移植性降低，增加对象间的耦合性，如果一个类被其他的类所继承，则当这个类需要修改时，必须考虑到所有的子类，并且父类修改后，所有涉及到子类的功能都有可能产生故障")])]),i._v(" "),v("p",[v("strong",[i._v("基本介绍")])]),i._v(" "),v("ul",[v("li",[i._v("里氏替换原则(Liskov Substitution Principle)在1988年，由麻省理工学院的以为姓里的女士提出的。")]),i._v(" "),v("li",[i._v("如果对每个类型为T1的对象o1，都有类型为T2的对象o2，使得以T1定义的所有程序的对象o1都代换成o2时，程序P的行为没有发生变化，那么类型T2是类型T1的子类型。换句话说，所有引用基类的地方必须能透明地使用其子类的对象。")]),i._v(" "),v("li",[i._v("在使用继承时，遵循里氏替换原则，在子类中"),v("strong",[i._v("尽量")]),i._v("不要重写父类的方法")]),i._v(" "),v("li",[i._v("里氏替换原则告诉我们，继承实际上让两个类耦合性增强了， "),v("strong",[i._v("在适当的情况下，可以通过聚合，组合，依赖 来解决问题")]),i._v("。")])]),i._v(" "),v("h3",{attrs:{id:"开闭原则-open-closed-principle"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#开闭原则-open-closed-principle"}},[i._v("#")]),i._v(" 开闭原则 Open Closed Principle")]),i._v(" "),v("blockquote",[v("p",[i._v("对扩展开发，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。")])]),i._v(" "),v("p",[v("strong",[i._v("基本介绍")])]),i._v(" "),v("ul",[v("li",[i._v("开闭原则（Open Closed Principle）是编程中最基础、最重要的设计原则")]),i._v(" "),v("li",[i._v("一个软件实体如类，模块和函数应该对扩展开放(对提供方)，对修改关闭(对使用方)。用抽象构建框架，用实现扩展细节。")]),i._v(" "),v("li",[i._v("当软件需要变化时，尽量"),v("strong",[i._v("通过扩展")]),i._v("软件实体的行为来实现变化，而"),v("strong",[i._v("不是通过修改")]),i._v("已有的代码来实现变化。")]),i._v(" "),v("li",[i._v("编程中遵循其它原则，以及使用设计模式的目的就是遵循"),v("strong",[i._v("开闭原则")]),i._v("。")])]),i._v(" "),v("h3",{attrs:{id:"迪米特法则-demeter-principle"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#迪米特法则-demeter-principle"}},[i._v("#")]),i._v(" 迪米特法则 Demeter Principle")]),i._v(" "),v("blockquote",[v("p",[i._v("最少知道原则。类应该对调用的类知道的最少。减少类间耦合，实现弱耦合。")])]),i._v(" "),v("p",[v("strong",[i._v("基本介绍")])]),i._v(" "),v("ul",[v("li",[i._v("一个对象应该对其他对象保持最少的了解")]),i._v(" "),v("li",[i._v("类与类关系越密切，耦合度越大")]),i._v(" "),v("li",[i._v("迪米特法则(Demeter Principle)又叫 最少知道原则，即一个类对自己依赖的类知道的越少越好。也就是说，对于被依赖的类不管多么复杂，都尽量将逻辑封装在类的内部。对外除了提供的public 方法，不对外泄露任何信息")]),i._v(" "),v("li",[i._v("迪米特法则还有个更简单的定义：只与直接的朋友通信")]),i._v(" "),v("li",[v("strong",[i._v("直接的朋友")]),i._v("：每个对象都会与其他对象有耦合关系，只要两个对象之间有耦合关系，我们就说这两个对象之间是朋友关系。耦合的方式很多，依赖，关联，组合，聚合等。其中，我们称出现成员变量，方法参数，方法返回值中的类为直接的朋友，而出现在局部变量中的类不是直接的朋友。也就是说，陌生的类最好不要以局部变量的形式出现在类的内部。")])]),i._v(" "),v("p",[v("strong",[i._v("迪米特法则注意事项和细节")])]),i._v(" "),v("ul",[v("li",[i._v("迪米特法则的核心是 降低类之间的耦合")]),i._v(" "),v("li",[i._v("但是注意：由于每个类都减少了不必要的依赖，因此迪米特法则只是要求降低类间(对象间)耦合关系， 并不是要求完全没有依赖关系")])]),i._v(" "),v("h3",{attrs:{id:"合成复用原则-composite-reuse-principle"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#合成复用原则-composite-reuse-principle"}},[i._v("#")]),i._v(" 合成复用原则 Composite Reuse Principle")]),i._v(" "),v("p",[v("strong",[i._v("原则是尽量使用合成/聚合的方式，而不是使用继承")])]),i._v(" "),v("h3",{attrs:{id:"设计原则核心思想"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#设计原则核心思想"}},[i._v("#")]),i._v(" 设计原则核心思想")]),i._v(" "),v("ul",[v("li",[i._v("找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起。")]),i._v(" "),v("li",[i._v("针对接口编程，而不是针对实现编程。")]),i._v(" "),v("li",[i._v("为了交互对象之间的松耦合设计而努力")])])])}),[],!1,null,null,null);v.default=e.exports}}]);